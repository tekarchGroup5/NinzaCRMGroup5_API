package tests;

import static org.testng.Assert.fail;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.Driver;
import java.util.jar.Attributes.Name;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import pages.CRM_CampaignsPage;
import utils.CommonUtils;
import utils.ReportManager;
import utils.FileUtils;
import utils.WaitUtils;
import listeners.ListenersCRM;

@Listeners(ListenersCRM.class)
public class Crm_CampaignTest extends BaseTest {
	public static Logger logger = LogManager.getLogger("Crm_CampaignTest");

	/*
	 * @BeforeMethod public void PreCondition() { if(ca) { driver =
	 * Crm_BaseTest.getDriver("chrome");
	 * Logger.error("BaseTest:PreCondition:Opening Page"); } }
	 */


	@Test(enabled = true)
	public void TC_1_VerifyID_Autogenerated(Method name) throws FileNotFoundException, IOException {

		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		CP.user_on_campaignPage();
		if (WaitUtils.waitForElement(driver, CP.Campaign_Name))
			CP.Campaign_Name.sendKeys(FileUtils.readCampaignPropertiesFile("campaign.name"));
		logger.info(" Name entered");
		CP.campaignSize.sendKeys(FileUtils.readCampaignPropertiesFile("size"));
		logger.info(" Size entered");
		CP.Submit_button.click();
		logger.info(" You clicked submit button");
		WaitUtils.waitForElement(driver, CP.table_ID);
		String AId = CP.AutoGenerated_CampaignId.getText();
		Assert.assertTrue(CP.AutoGenerated_CampaignId.isDisplayed(),"Campaign ID field should be present");
		String AName = CP.AutoGenerated_CampaignName.getText();
		Assert.assertTrue(CP.AutoGenerated_CampaignName.isDisplayed(),"Campaign Name field should be present");
		String ASZ = CP.AutoGenerated_CampaigSize.getText();
		Assert.assertTrue(CP.AutoGenerated_CampaigSize.isDisplayed(),"Campaign Size field should be present");
		logger.info(" Auto generated Campaign ID is: " + AId + " for Campaign name: " + AName + " for " + ASZ);
		//test.pass(name.getName());
	}


	@Test(enabled = true)
	public void TC_2_Verify_CampaignName_mandatory() throws FileNotFoundException, IOException {
		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		CP.user_on_campaignPage();		
		Assert.assertTrue(CP.check_CampainName(FileUtils.readCampaignPropertiesFile("size")));
		logger.info(" Screenshot captured for Error!");
		logger.info(" Campaign name is mandatory");
	}


	@Test(enabled = true)
	public void TC_3_Verify_Targetsize_is_greater_than_Zero() throws FileNotFoundException, IOException {

		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		CP.user_on_campaignPage();
		CP.check_TargetSize_isPositive(FileUtils.readCampaignPropertiesFile("campaign.name"),
				FileUtils.readCampaignPropertiesFile("negative.size"));
		logger.info(" Screenshot captured for Error!");
	}

	@Test(enabled = true)
	public void TC_4_Verify_Expected_closedate_format() throws FileNotFoundException, IOException {

		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		CP.user_on_campaignPage();
		CP.filling_the_Form(driver, FileUtils.readCampaignPropertiesFile("campaign.name"),
				FileUtils.readCampaignPropertiesFile("status"), FileUtils.readCampaignPropertiesFile("size"),
				FileUtils.readCampaignPropertiesFile("valid.date"), FileUtils.readCampaignPropertiesFile("audience"),
				FileUtils.readCampaignPropertiesFile("description"));
		logger.info(" Valid date is accepted!");

		CP.user_on_campaignPage();
		CP.filling_the_Form(driver, FileUtils.readCampaignPropertiesFile("campaign.name"),
				FileUtils.readCampaignPropertiesFile("status"), FileUtils.readCampaignPropertiesFile("size"),
				FileUtils.readCampaignPropertiesFile("invalid.date"), FileUtils.readCampaignPropertiesFile("audience"),
				FileUtils.readCampaignPropertiesFile("description"));
		utils.CommonUtils.captureScreenshot(driver);
		System.out.println(" Screen shot taken!");
		logger.info(" Invalid date is not accepted!");
	}

	@Test(enabled = true)
	public void TC_5_Verify_Status_optional() throws FileNotFoundException, IOException {

		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		CP.user_on_campaignPage();
		CP.Check_Status_optional(FileUtils.readCampaignPropertiesFile("campaign.name"),
				FileUtils.readCampaignPropertiesFile("size"));
		logger.info(" Campaign status is optional");
	}

	@Test(enabled = true)

	public void TC_6_Verify_TargerAudience_optional() throws FileNotFoundException, IOException {
    
		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		CP.user_on_campaignPage();
		CP.Check_TargerAudience_optional(FileUtils.readCampaignPropertiesFile("campaign.name"),
				FileUtils.readCampaignPropertiesFile("size"));
		logger.info(" Campaign Target Audience is optional");
	}

	@Test(enabled = true)
	public void TC_7_Verify_Description_is_Oprional() throws FileNotFoundException, IOException {

		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		CP.user_on_campaignPage();
		CP.check_Description_is_Oprional(FileUtils.readCampaignPropertiesFile("campaign.name"),
				FileUtils.readCampaignPropertiesFile("size"));
		logger.info(" Campaign description is optional");
	}

	@Test(enabled = true)

  public void TC_8_Verify_SaveCampaign_with_All_Fields() throws FileNotFoundException, IOException {
		// test = extent.createTest(Name.getName());
		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		 WaitUtils.waitForElement(driver, CP.Campaign_Form_button);
				CP.Campaign_Form_button.click();
		CP.filling_the_Form(driver, FileUtils.readCampaignPropertiesFile("campaign.name"),
				FileUtils.readCampaignPropertiesFile("status"), FileUtils.readCampaignPropertiesFile("size"),
				FileUtils.readCampaignPropertiesFile("valid.date"), FileUtils.readCampaignPropertiesFile("audience"),
				FileUtils.readCampaignPropertiesFile("description"));
		utils.CommonUtils.captureScreenshot(driver);
		logger.info(" Screen shot taken!");
		logger.info(" Campaign details are saved");
	}

	@Test(enabled = true)

	public void TC_9_Verify_Edit_Campaign_Name() throws FileNotFoundException, IOException {

		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		//CP.Edit_Campaign_Name(driver, FileUtils.readCampaignPropertiesFile("updated.name"));
		if (WaitUtils.waitForElement(driver, CP.Campaign_label)) {
			logger.info("User are on Campaign Page");
			driver.manage().window().maximize();
		}
		WaitUtils.waitForElement(driver, CP.editBtn);
		CP.editBtn.click();
		logger.info(" Edit button clicked");
		WaitUtils.waitForElement(driver, CP.Campaign_Name);
		CP.Campaign_Name.click();
		CP.Campaign_Name.clear();
		logger.info(" Cleared old Campaign name");
		CP.Campaign_Name.sendKeys(FileUtils.readCampaignPropertiesFile("updated.name"));
		logger.info(" Entered Updated Campaign name");
		CP.update_Campaign.click();
		logger.info(" Update Campaign clicked");
		WaitUtils.waitForElement(driver, CP.Campaign_Button);
		logger.info("User are on Campaign Page");
		CP.Alert_Message();
		utils.CommonUtils.captureScreenshot(driver);
		logger.info(" Screen shot taken!");
		logger.info(" Updated/edited  campaign name verified");
		}

	@Test (enabled=true)

	public void TC_10_Verify_Update_Campaign_Status() throws FileNotFoundException, IOException {

		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		CP.user_on_campaignPage();
		CP.filling_the_Form(driver, FileUtils.readCampaignPropertiesFile("campaign.name"),
				FileUtils.readCampaignPropertiesFile("status"), FileUtils.readCampaignPropertiesFile("size"),
				FileUtils.readCampaignPropertiesFile("valid.date"), FileUtils.readCampaignPropertiesFile("audience"),
				FileUtils.readCampaignPropertiesFile("description"));
		WaitUtils.waitForElement(driver, CP.editBtn);
		CP.editBtn.click();
		if (WaitUtils.waitForElement(driver, CP.Campaign_Status)) {
			CP.Campaign_Status.clear();
			CP.Campaign_Status.sendKeys(FileUtils.readCampaignPropertiesFile("update.status"));
			logger.info(" Updated Status is entered");
			CP.Calender.clear();
			CP.update_Campaign.click();
			WaitUtils.waitForElement(driver, CP.Campaign_label);
			logger.info("you are on Campaign Page");
			CP.Alert_Message();
			logger.info("Updated Status Created successfully!");
			
		}
	}


	@Test(enabled = true)

	public void TC_11_Verify_search_button_Function() throws FileNotFoundException, IOException {
		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		CP.select_search_dropdown(driver, FileUtils.readCampaignPropertiesFile("value"),
				FileUtils.readCampaignPropertiesFile("campaign.name"));
		logger.info(" Verified search button functionality.");
	}

	@Test(enabled = true)

	public void TC_12_Verify_Delete_button() throws FileNotFoundException, IOException {
		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		CP.filling_the_Form(driver, FileUtils.readCampaignPropertiesFile("campaign.name"),
				FileUtils.readCampaignPropertiesFile("status"), FileUtils.readCampaignPropertiesFile("size"),
				FileUtils.readCampaignPropertiesFile("valid.date"), FileUtils.readCampaignPropertiesFile("audience"),
				FileUtils.readCampaignPropertiesFile("description"));
		CP.select_search_dropdown(driver, FileUtils.readCampaignPropertiesFile("value"),
				FileUtils.readCampaignPropertiesFile("campaign.name"));
		CP.delete_icon.click();
		logger.info("Delete button clicked");
		WaitUtils.waitForElement(driver, CP.Delete_Campaign_Label);
		CP.Delete_Campaign.click();
		utils.CommonUtils.captureScreenshot(driver);
		logger.info("screenshot is taken");
		logger.info(" Conforming Deletion...");
		CP.Alert_Message();
	}

	@Test(enabled = true)

	public void TC_13_create_duplicate_campaign_name() throws FileNotFoundException, IOException {
		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		CP.user_on_campaignPage();
		CP.Enter_CampainName(FileUtils.readCampaignPropertiesFile("campaign.name"),
				FileUtils.readCampaignPropertiesFile("size"));
		CP.user_on_campaignPage();
		CP.Enter_CampainName(FileUtils.readCampaignPropertiesFile("campaign.name"),
				FileUtils.readCampaignPropertiesFile("size"));
		CP.select_search_dropdown(driver, FileUtils.readCampaignPropertiesFile("value"),
				FileUtils.readCampaignPropertiesFile("campaign.name"));
		CP.check_appearance_of_element();

	}

	@Test(enabled = true)

	public void TC_14_Verify_all_required_fields_exist() throws FileNotFoundException, IOException {
		WebDriver driver = getBrowser();
		CRM_CampaignsPage CP = new CRM_CampaignsPage(driver);
		if (WaitUtils.waitForElement(driver, CP.Campaign_label)) {
			logger.info("you are on Campaign Page");
			Assert.assertTrue(CP.Campaign_label.isDisplayed(), " Campaign label should be visible");
			//driver.manage().window().maximize();
			String[] ExpectedColumns = FileUtils.readCampaignPropertiesFile("campaigndisplay.options").split(",");
			WaitUtils.waitForElement(driver, CP.table_ID);
			logger.info(" Elements of the columns: " + CP.table_Cols.size());
			for (int r = 1; r <= CP.table_Cols.size(); r++) {
				WebElement col_Names = driver.findElement(
						By.xpath("//table[@class='table table-striped table-hover']/thead/tr/th[" + r + "]"));
				// System.out.println("Column Names: " + col_Names.getText());
				for (int i = 0; i < ExpectedColumns.length; i++) {
					if (col_Names.getText().equals(ExpectedColumns[i])) {
						System.out.println (" Expected Columns: " + ExpectedColumns[i] + "  Actual Columns: "
								+ col_Names.getText());
						Assert.assertNotNull(col_Names.getText(), "Column names should not be null");
						logger.info(" All the field are present.");
					}
				}
			}
		}

	}
}
